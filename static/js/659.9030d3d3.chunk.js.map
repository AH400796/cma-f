{"version":3,"file":"static/js/659.9030d3d3.chunk.js","mappings":"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","sources":["helpers/notifycation.js","components/SignUpForm/SignUpForm.styled.jsx","components/SignUpForm/SignUpForm.jsx","components/VerifyForm/VerifyForm.styled.jsx","components/VerifyForm/VerifyForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const notify = text =>\n  toast(text, {\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: true,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'colored',\n  });\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n\nexport const LoginFormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  width: 300px;\n  padding: 20px;\n  font-weight: 500;\n\n  color: #f85b12;\n  background: linear-gradient(\n    274.25deg,\n    #453432 23.51%,\n    rgba(69, 52, 50, 0.83) 50.89%,\n    rgba(117, 104, 77, 0.81) 308.27%\n  );\n  box-shadow: 2px 3px 5px #3d3d3d;\n  border-radius: 5px;\n`;\n\nexport const InputLabel = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 16px;\n  margin-bottom: 30px;\n`;\n\nexport const Input = styled(Field)`\n  max-width: 300px;\n  outline: transparent;\n  padding: 9px 15px 8px 15px;\n  font-size: 16px;\n  border: none;\n  border-radius: 3px;\n  color: #453432;\n  background-color: #c0bcba;\n  box-shadow: 1px 1px 6px #3d3d3d;\n\n  &::placeholder {\n    font-size: 14px;\n    color: #7a7a7a;\n  }\n`;\nexport const ErrWrapper = styled.span`\n  font-size: 12px;\n  color: red;\n  position: absolute;\n  bottom: -20px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 600;\n  width: 100px;\n  height: 40px;\n\n  border-radius: 5px;\n\n  color: #f85b12;\n  background-color: #4e4039;\n  border: 2px solid #f85b12;\n  box-shadow: 1px 1px 3px #c9c1c1;\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #f85b12;\n    color: #ffffff;\n  }\n\n  &:disabled {\n    color: #bdbdbd;\n    background-color: #4e4039;\n    border: 2px solid #bdbdbd;\n\n    cursor: auto;\n  }\n`;\n","// import { useState, useEffect } from 'react';\n// import { useContext } from 'react';\nimport { notify } from 'helpers/notifycation';\nimport { registerUser } from '../../services/API';\n\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport {\n  LoginFormStyled,\n  InputLabel,\n  Button,\n  Input,\n  ErrWrapper,\n  Wrapper,\n} from './SignUpForm.styled';\n\nconst regNotify =\n  'You have successfully registered. A verification code was sent to your email ';\n\nconst initialsValues = {\n  email: '',\n  password: '',\n};\n\nconst FormSchema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(8).required(),\n});\n\nexport default function SignUpForm({ onRegister }) {\n  const handleSubmitForm = async (values, { resetForm }) => {\n    try {\n      const response = await registerUser(values);\n      if (response.status === 200) {\n        onRegister(values.email);\n        notify(regNotify);\n        resetForm();\n      }\n    } catch (error) {\n      notify(regNotify);\n    }\n  };\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialsValues}\n        onSubmit={handleSubmitForm}\n        validationSchema={FormSchema}\n      >\n        {props => (\n          <LoginFormStyled>\n            <InputLabel>\n              Email\n              <Input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"example@gmail.com\"\n              />\n              <ErrWrapper>\n                <ErrorMessage name=\"email\" />\n              </ErrWrapper>\n            </InputLabel>\n            <InputLabel>\n              Password\n              <Input type=\"password\" name=\"password\" placeholder=\"********\" />\n              <ErrWrapper>\n                <ErrorMessage name=\"password\" />\n              </ErrWrapper>\n            </InputLabel>\n\n            <Button\n              type=\"submit\"\n              disabled={\n                (props.values.email !== '') & (props.values.password !== '')\n                  ? false\n                  : true\n              }\n            >\n              Sign up\n            </Button>\n          </LoginFormStyled>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n}\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\nexport const VerifyTextWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 300px;\n  padding: 0 20px 20px 20px;\n  font-weight: 500;\n\n  color: #f85b12;\n  background: linear-gradient(\n    274.25deg,\n    #453432 23.51%,\n    rgba(69, 52, 50, 0.83) 50.89%,\n    rgba(117, 104, 77, 0.81) 308.27%\n  );\n  box-shadow: 2px 3px 5px #3d3d3d;\n  border-radius: 5px;\n`;\n\nexport const VerifyText = styled.span`\n  text-align: center;\n  font-size: 16px;\n  margin: 20px 0 0;\n`;\nexport const LoginFormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  width: 300px;\n  padding: 20px;\n  font-weight: 500;\n\n  color: #f85b12;\n  background: linear-gradient(\n    274.25deg,\n    #453432 23.51%,\n    rgba(69, 52, 50, 0.83) 50.89%,\n    rgba(117, 104, 77, 0.81) 308.27%\n  );\n  box-shadow: 2px 3px 5px #3d3d3d;\n  border-radius: 5px;\n`;\n\nexport const InputLabel = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n\n  gap: 10px;\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const Verifyext = styled.span`\n  font-size: 16px;\n  margin: 20px 0 0;\n`;\n\nexport const Input = styled(Field)`\n  max-width: 300px;\n\n  padding: 9px 15px 8px 15px;\n  font-size: 16px;\n  border: none;\n  border-radius: 3px;\n  color: #453432;\n  background-color: #c0bcba;\n  box-shadow: 1px 1px 6px #3d3d3d;\n  outline: transparent;\n\n  &::placeholder {\n    font-size: 14px;\n    color: #7a7a7a;\n    background-color: #c0bcba;\n  }\n`;\n\nexport const CodeInput = styled(Field)`\n  align-self: center;\n  text-align: center;\n  width: 120px;\n  padding: 9px 15px 8px 15px;\n  font-size: 24px;\n  border: none;\n  border-radius: 3px;\n  color: #453432;\n  background-color: #c0bcba;\n  box-shadow: 1px 1px 6px #3d3d3d;\n  outline: transparent;\n  appearance: none;\n  margin: 0;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  &[type='number'] {\n    -moz-appearance: textfield;\n  }\n`;\n\nexport const ErrWrapper = styled.span`\n  font-size: 12px;\n  color: red;\n  position: absolute;\n  bottom: -20px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 600;\n  width: 120px;\n  height: 40px;\n\n  border-radius: 5px;\n\n  color: #f85b12;\n  background-color: #4e4039;\n  border: 2px solid #f85b12;\n  box-shadow: 1px 1px 3px #c9c1c1;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #f85b12;\n    color: #ffffff;\n  }\n\n  &:disabled {\n    color: #bdbdbd;\n    background-color: #4e4039;\n    border: 2px solid #bdbdbd;\n\n    cursor: auto;\n  }\n`;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { verify } from '../../services/API';\nimport { reVerify } from '../../services/API';\nimport { notify } from 'helpers/notifycation';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  LoginFormStyled,\n  InputLabel,\n  VerifyText,\n  Button,\n  CodeInput,\n  VerifyTextWrapper,\n  Wrapper,\n} from './VerifyForm.styled';\n\nconst FormSchema = yup.object().shape({\n  verificationCode: yup.number().required(),\n});\n\nexport default function VerifyForm({ verifEmail }) {\n  const [verifyResponse, setVerifyResponse] = useState(null);\n  const navigate = useNavigate();\n\n  const handleSubmitForm = async (values, { resetForm }) => {\n    try {\n      const response = await verify(values);\n      if (response.status === 200) {\n        setVerifyResponse(response);\n        setTimeout(() => {\n          navigate('/login', { replace: true });\n        }, 3000);\n      }\n    } catch (error) {\n      notify(error.message);\n    }\n  };\n\n  const handleResend = async () => {\n    try {\n      const response = await reVerify({ email: verifEmail });\n      if (response.status === 200) {\n        notify(response.data.message);\n      }\n    } catch (error) {\n      notify(error.message);\n    }\n  };\n\n  return (\n    <Wrapper>\n      {verifyResponse && verifyResponse.status === 200 && (\n        <VerifyTextWrapper>\n          <VerifyText>{verifyResponse.data.message}</VerifyText>\n        </VerifyTextWrapper>\n      )}\n      {!verifyResponse && (\n        <Formik\n          initialValues={{\n            verificationCode: '',\n          }}\n          onSubmit={handleSubmitForm}\n          validationSchema={FormSchema}\n        >\n          {props => (\n            <LoginFormStyled>\n              <InputLabel>\n                Your verification code\n                <CodeInput type=\"number\" name=\"verificationCode\" />\n              </InputLabel>\n\n              <Button\n                type=\"submit\"\n                disabled={props.values.verificationCode !== '' ? false : true}\n              >\n                Verify code\n              </Button>\n              <VerifyText>Didn't receive a verification code?</VerifyText>\n              <Button type=\"button\" onClick={handleResend}>\n                Resend code\n              </Button>\n            </LoginFormStyled>\n          )}\n        </Formik>\n      )}\n    </Wrapper>\n  );\n}\n","import { useState } from 'react';\n\nimport SignUpForm from 'components/SignUpForm';\nimport VerifyForm from 'components/VerifyForm';\n\nexport default function RegisterPage() {\n  const [email, setEmail] = useState();\n  const [verify, setVerify] = useState(false);\n  const handleRegister = data => {\n    setVerify(true);\n    setEmail(data);\n  };\n  return (\n    <>\n      {!verify && <SignUpForm onRegister={handleRegister} />}\n      {verify && <VerifyForm verifEmail={email} />}\n    </>\n  );\n}\n"],"names":["notify","text","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","Wrapper","styled","LoginFormStyled","Form","InputLabel","Input","Field","ErrWrapper","Button","regNotify","initialsValues","email","password","FormSchema","yup","shape","required","min","SignUpForm","onRegister","handleSubmitForm","values","resetForm","registerUser","status","initialValues","onSubmit","validationSchema","props","type","name","placeholder","disabled","VerifyTextWrapper","VerifyText","CodeInput","verificationCode","VerifyForm","verifEmail","useState","verifyResponse","setVerifyResponse","navigate","useNavigate","verify","response","setTimeout","replace","message","handleResend","reVerify","data","onClick","RegisterPage","setEmail","setVerify"],"sourceRoot":""}